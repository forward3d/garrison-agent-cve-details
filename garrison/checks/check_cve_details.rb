module Garrison
  module Checks
    class CheckCveDetails < Check

      def settings
        self.source ||= 'cve-details'
        self.family ||= 'software'
        self.type   ||= 'security'
      end

      def perform
        uris = []
        if options[:product_ids]
          options[:product_ids].each do |product_id|
            uris << build_url(product_id)
          end
        else
          # just add the vendor uri
          uris << build_url
        end

        uris.each do |uri|
          Logging.debug uri.to_s
          response = HTTParty.get(uri)
          response.each do |cve|
            alert(
              name: 'CVE',
              external_severity: CveHelper.cvss_score_to_severity(cve['cvss_score']),
              target: target_name,
              detail: cve['cve_id'],
              finding: cve.to_json,
              no_repeat: true,
              finding_id: "#{target_name}/#{cve['cve_id'].downcase}",
              urls: [
                {
                  name: 'CVE Details',
                  url: cve['url']
                },
                {
                  name: 'NIST',
                  url: File.join('https://nvd.nist.gov/vuln/detail', cve['cve_id'])
                }
              ],
              key_values: [
                {
                  key: 'cve',
                  value: cve['cve_id']
                }
              ]
            )
          end
        end
      end

      private

      def target_name
        if options[:product_name]
          "#{options[:vendor_name]}/#{options[:product_name]}"
        else
          options[:vendor_name]
        end
      end

      def build_url(product_id = nil)
        hash = {
          numrows: 30,
          vendor_id: options[:vendor_id],
          version_id: 0,
          order_by: 3
        }
        hash[:product_id] = product_id if product_id
        URI::HTTPS.build(host: 'www.cvedetails.com', path: '/json-feed.php', query: URI.encode_www_form(hash))
      end
    end
  end
end
